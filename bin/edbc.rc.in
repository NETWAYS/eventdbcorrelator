#!/bin/bash
# Autor: David Mikulski
# chkconfig: 345 99 01
# description: Startup script for edbc daemon
### BEGIN INIT INFO
# Provides: edbc
# Required-Start: $local_fs $network
# Required-Stop: $local_fs $network
# Should-Start: snmptrapd mysqld
# Should-Stop: snmptrapd mysqld
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: EventDB correlator Initscript
# Description:       EventDB Agent with aggregation and correlation
### END INIT INFO

. /etc/init.d/functions

if [ -e /etc/sysconfig/edbc ]; then
  . /etc/sysconfig/edbc
fi

OPTIONS=""
if [ -e /etc/sysconfig/edbc ]; then
  . /etc/sysconfig/edbc
fi

RETVAL=0
LOCKFILE=@lock_dir@/edbc.lock
LOGFILE="@log_file@"
PROG="edbc"
BINARY=@libdir@/edbc.py
PIDFILE=@pid_dir@/edbc.pid

start() {
        [ -x $BINARY ] || exit 5 
    getpids
    if [ -n "$PIDS" ]; then
        warning
        echo $"$PROG (pid $pid) already running:";
    else
            "$BINARY" --log="$LOGFILE"
        RETVAL=$?
        if [ $RETVAL -ne 0 ]; then
        failure 
        echo $"Starting $PROG..."
            else
        success
        echo $"Starting $PROG..."
        fi
    fi
        return $RETVAL
}

status() {
    getpids
        if [ -n "$PIDS" ]; then
        if [ $PIDCOUNTER -eq 1 ]; then success; echo $"$PROG (pid $pid) is running:"; fi
        if [ $PIDCOUNTER -gt 1 ]; then warning; echo $"More than one $PROG (pid $PIDS) running:"; fi
    else
        failure
        echo $"$PROG not running:"
        RETVAL=1
    fi
    return $RETVAL
}

stop() {
        echo -n $"Stopping $PROG: "
        getpids
        if [ -n "$PIDS" ]; then
        kill -9 $PIDS
        RETVAL=$?
        if [ $RETVAL -eq 0 ]; then
        if [ $PIDCOUNTER -eq 1 ]; then success; echo $"Stopping $PROG (pid $pid):"; fi
        if [ $PIDCOUNTER -gt 1 ]; then warning; echo $"$PIDCOUNTER times $PROG (pids $PIDS) killed:"; fi
        else
        warning
        echo $"$PROG (pid $pid) tried to kill...check for errors!";
        fi
        else
            failure
            RETVAL=1
            echo
        fi
        return $RETVAL
}

getpids() {
        PIDCOUNTER=0
    PIDS=""
    PIDS=`pgrep -d $'\t' -f "$BINARY"`
    if [ -n "$PIDS" ]; then
        for pid in $PIDS; do
            PIDCOUNTER=$[$PIDCOUNTER +1]
        done;
    fi
}
    
reload(){
        stop
        start
}
restart(){
        stop
        start
}

condrestart(){
    [ -e $LOCKFILE ] && restart
    return 0
}

case "$1" in
  start)
        start
        RETVAL=$?
        ;;
  stop)
        stop
        RETVAL=$?
        ;;
  restart)
        restart
        RETVAL=$?
        ;;
  reload|force-reload)
        reload
        RETVAL=$?
        ;;
  condrestart|try-restart)
        condrestart
        RETVAL=$?
        ;;
  status)
    status
    RETVAL=$?
        ;;
  *)
        echo $"Usage: $0 {start|stop|status|restart}"
        RETVAL=2
esac

exit $RETVAL


