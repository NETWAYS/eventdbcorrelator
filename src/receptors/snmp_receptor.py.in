"""
EDBC - Message correlation and aggregation engine for passive monitoring events
Copyright (C) 2012  NETWAYS GmbH

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

"""
from receptors import PipeReceptor
import logging
import os 

class SnmpReceptor(PipeReceptor):
    """ Special PipeRececptor that additionally creates an snmp_handler script that receives traps, 
        formats them and forwards them to the pipe created by the underlying PipeReceptor

    """   
    

    def setup(self, _id, config):
        """ Default setup method as called by the InstanceFactroy, sets up the pipe 
            but doesn't start the read operation yet

        """

        self.id = _id
        self.running = False
        self.callback = None
        self.config = {
            "mod": 0774,
            "owner": os.getuid(),
            "group": os.getgid(),
            "handler" : "/usr/local/var/edbc_traphandler",
            "path" : "/usr/local/var/edbc_traphandler.pipe",
            "handler_tpl" : "@prefix@/libexec/snmp_handler_template",
            "bufferSize" : 2048,
            "format" : None
        }
        if "handler" in config and not "path" in config:
            self.config["path"] = config["handler"]+".pipe"
            
        self.run_flags = os.O_RDONLY|os.O_NONBLOCK
        
        for key in config.keys():
            if key == 'owner':
                config[key] = pwd.getpwnam(config[key]).pw_uid
            else:
                if key == 'group':
                    config[key] = pwd.getpwnam(config[key]).pw_gid
                else:
                    self.config[key] = config[key]
        
        if "source_type" in self.config:
            self.source = self.config["source_type"]
        else:
            self.source = "snmp"
            
        if not os.path.exists(self.config["handler_tpl"]):
            logging.error("SNMP handler %s can't be created: %s doesn't exist.", self.id, self.config["handler_tpl"])
            return 

        self.pipe = None
        self.queues = []
        PipeReceptor.setup_pipe(self)
        self.__create_handler()
        
        
    def __create_handler(self):
        """ Creates the snmp handler application that formats traps for the pipe and forwards them to the pipereceptor

        """
        #logging.debug("Setting up PipeReceptor with %s" % self.config)
        if os.path.exists(self.config["handler"]):
            os.remove(self.config["handler"])
        handler_tpl = open(self.config["handler_tpl"],"r")
        trap_app = ""
        for line in handler_tpl:
            trap_app += line
        handler_tpl.close()

        trap_app = trap_app % ({"PIPE": self.config["path"] })
        file = open(self.config["handler"],"w+")
        file.write(trap_app)
        file.close()
        os.chown(self.config["handler"], self.config["owner"], self.config["group"])
        os.chmod(self.config["handler"], self.config["mod"])
